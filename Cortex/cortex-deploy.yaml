---
apiVersion: "v1"
kind: "Namespace"
metadata:
    name: cortex
    labels:
        name: cortex
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-pvc-cortex
  namespace: cortex  # Asegúrate de que coincida con el namespace de Elasticsearch
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # Ajusta el tamaño según tus necesidades
  storageClassName: gp2  # Asegúrate de que el nombre de la StorageClass esté disponible en tu EKS
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
  namespace: cortex
spec:
  ports:
    - port: 9200 #Por default usa el 9200, lo cambie al 9201 porque Wazuh tambien usa ese puerto, lo que crea conflictos y rompe ambas aplicaciones
  selector:
    app: elasticsearch
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: cortex
  labels:
    app: elasticsearch
spec:
  serviceName: elasticsearch
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      terminationGracePeriodSeconds: 1800
      initContainers:
        - name: init
          image: debian:stable-slim
          command:
            - bash
            - "-c"
            - "mkdir -p /usr/share/elasticsearch/data && chmod -R 777 /usr/share/elasticsearch/data"
          volumeMounts:
            - name: es-data
              mountPath: /usr/share/elasticsearch/data
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.17.12
          ports:
            - containerPort: 9200  # Ajusta este puerto si es necesario
              name: http
          resources:
            limits:
              cpu: "500m"
              memory: 1500Mi
            requests:
              cpu: "500m"
              memory: 1000Mi
          env:
            - name: "node.name"
              value: es
            - name: "cluster.name"
              value: es-docker-cluster
            - name: "discovery.type"
              value: single-node
            - name: "bootstrap.memory_lock"
              value: "true"
            - name: ES_JAVA_OPTS
              value: "-Xms1024m -Xmx1024m"
            - name: "xpack.security.enabled"
              value: "false"
          volumeMounts:
            - name: es-data
              mountPath: /usr/share/elasticsearch/data
      volumes:
        - name: es-data
          persistentVolumeClaim:  # Reemplaza `emptyDir` por un PVC si deseas persistencia
              claimName: elasticsearch-pvc-cortex

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader
  namespace: cortex
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cortex
  namespace: cortex
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: cortex
subjects:
  - kind: ServiceAccount
    name: cortex
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gp2
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
  fsType: ext4
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cortex-config
  namespace: cortex
data:
  application.conf: |
    play.modules.enabled += org.thp.cortex.CortexModule
    # Configura el secret de la aplicación
    play.http.secret.key = "TU_SECRETO_AQUI"
    # Configura la URL de acceso a Cortex
    play.http.context = "/"
    # Configuración de autenticación de usuarios, puedes usar LDAP o un archivo de usuarios
    auth.method.basic = "file"
    auth.method.basic.file = "/etc/cortex/users.conf"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cortex-users
  namespace: cortex
data:
  users.conf: |
    # Archivo de configuración de usuarios en formato JSON
    [
      {
        "login": "admin",
        "name": "admin",
        "roles": ["superadmin"],
        "password": "$2a$12$XVXg9.6qZ0M2vW6qNUvGF.CzZ4CHgucV30OpgZHRq.t3PpU/EH2gy"
      }
    ]
---  #patri123
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cortex
  namespace: cortex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cortex
  serviceName: cortex
  template:
    metadata:
      labels:
        app: cortex
    spec:
      serviceAccountName: cortex
      initContainers:
        - name: init-config
          image: busybox
          command: 
            - sh
            - "-c"
            - |
              mkdir -p /config /config-temp
              cp /config/application.conf /config-temp/ || echo "Error copiando application.conf"
              cp /config/users.conf /config-temp/ || echo "Error copiando users.conf"
          volumeMounts:
            - name: config-volume
              mountPath: /config
            - name: config-temp
              mountPath: /config-temp
      containers:
        - name: cortex
          image: thehiveproject/cortex:3
          ports:
            - containerPort: 9001
          volumeMounts:
            - name: config-temp
              mountPath: /etc/cortex/application.conf
              subPath: application.conf
            - name: config-temp
              mountPath: /etc/cortex/users.conf
              subPath: users.conf
      volumes:
        - name: config-volume
          configMap:
            name: cortex-config
        - name: config-temp
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: cortex-service
  namespace: cortex
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 9001
  selector:
    app: cortex
