---
apiVersion: "v1"
kind: "Namespace"
metadata:
    name: thehive
    labels:
        name: thehive
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
  namespace: thehive
spec:
  ports:
    - port: 9042
  selector:
    app: cassandra
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  namespace: thehive
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 1
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
        - name: cassandra
          image: cassandra:4.1
          ports:
            - containerPort: 7000
              name: intra-node
            - containerPort: 7001
              name: tls-intra-node
            - containerPort: 7199
              name: jmx
            - containerPort: 9042
              name: cql
          resources:
            limits:
              cpu: "1000m"
              memory: 1600Mi
            requests:
              cpu: "500m"
              memory: 1600Mi
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - nodetool drain
          env:
            - name: MAX_HEAP_SIZE
              value: 1024M
            - name: HEAP_NEWSIZE
              value: 1024M
            - name: CASSANDRA_CLUSTER_NAME
              value: "TheHive"
            - name: CASSANDRA_DC
              value: "DC1-TheHive"
            - name: CASSANDRA_RACK
              value: "Rack1-TheHive"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          # These volume mounts are persistent. They are like inline claims,
          # but not exactly because the names need to match exactly one of
          # the stateful pod volumes.
          volumeMounts:
            - name: cassandra-data
              mountPath: /var/lib/cassandra
      volumes:
        - name: cassandra-data
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
  namespace: thehive
spec:
  ports:
    - port: 9200
  selector:
    app: elasticsearch
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: thehive
  labels:
    app: elasticsearch
spec:
  serviceName: elasticsearch
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      terminationGracePeriodSeconds: 1800
      initContainers:
        - name: init
          image: debian:stable-slim
          command:
            - bash
            - "-c"
            - "mkdir -p /usr/share/elasticsearch/data && chmod -R 777 /usr/share/elasticsearch/data"
          volumeMounts:
            - name: es-data
              mountPath: /usr/share/elasticsearch/data
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.17.12
          ports:
            - containerPort: 9200
              name: http
          resources:
            limits:
              cpu: "500m"
              memory: 1500Mi
            requests:
              cpu: "500m"
              memory: 1000Mi
          env:
            - name: "node.name"
              value: es
            - name: "cluster.name"
              value: es-docker-cluster
            - name: "discovery.type"
              value: single-node
            - name: "bootstrap.memory_lock"
              value: "true"
            - name: ES_JAVA_OPTS
              value: "-Xms1024m -Xmx1024m"
            - name: "xpack.security.enabled"
              value: "false"
          volumeMounts:
            - name: es-data
              mountPath: /usr/share/elasticsearch/data
      volumes:
        - name: es-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: minio
  name: minio
  namespace: thehive
spec:
  ports:
    - port: 9000
  selector:
    app: minio
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: thehive
  labels:
    app: minio
spec:
  serviceName: minio
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
        - name: minio
          image: quay.io/minio/minio
          command: ["minio", "server", "/data", "--console-address", ":9001"]
          env:
            - name: MINIO_ROOT_USER
              value: minioadmin
            - name: MINIO_ROOT_PASSWORD
              value: minioadmin
          ports:
            - containerPort: 9000
              name: http
          resources:
            limits:
              cpu: "500m"
              memory: 512Mi
            requests:
              cpu: "500m"
              memory: 256Mi
          volumeMounts:
            - name: s3-data
              mountPath: /data
      volumes:
        - name: s3-data
          emptyDir: {}
---
#
# Create a role, `pod-reader`, that can list pods and
# bind the default service account in the namespace
# that the binding is deployed to to that role.
#
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader
  namespace: thehive
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["pods"]
    verbs: ["get", "watch", "list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: thehive
  namespace: thehive
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: thehive
subjects:
  - kind: ServiceAccount
    name: thehive
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: thehive
  name: thehive
  namespace: thehive
spec:
  type: NodePort
  ports:
    - port: 9000
      nodePort: 30001
  selector:
    app: thehive
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thehive
  namespace: thehive
  labels:
    app: thehive
spec:
  replicas: 1
  selector:
    matchLabels:
      app: thehive
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: thehive
    spec:
      serviceAccountName: thehive
      containers:
        - name: thehive
          image: strangebee/thehive:5.4
          command:
            - "/opt/thehive/entrypoint"
            - "--secret"
            - "SuperSecretForKubernetes"
            - "--cql-hostnames"
            - "cassandra"
            - "--no-cql-wait"
            - "--no-config-cortex"
            - "--kubernetes"
            - "--index-backend"
            - "elasticsearch"
            - "--es-hostnames"
            - "elasticsearch"
            - "--s3-endpoint"
            - "http://minio:9000"
            - "--s3-access-key"
            - "minioadmin"
            - "--s3-secret-key"
            - "minioadmin"
            - "--s3-use-path-access-style"
            - "--cluster-min-nodes-count"
            - "0"
          ports:
            - containerPort: 9000
              name: http
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: "500m"
              memory: 512Mi

#          startupProbe:
#            httpGet:
#              path: /api/v1/status/public
#              port: 9000
#            failureThreshold: 30
#            periodSeconds: 10
#          livenessProbe:
#            httpGet:
#              path: /api/v1/status/public
#              port: 9000
#            periodSeconds: 10
